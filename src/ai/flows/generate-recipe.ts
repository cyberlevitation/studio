
'use server';

/**
 * @fileOverview Recipe generation AI agent.
 *
 * - generateRecipe - A function that generates a recipe based on cuisine,
 *   optionally including restaurant and video tutorial links.
 * - GenerateRecipeInput - The input type for the generateRecipe function.
 * - GenerateRecipeOutput - The return type for the generateRecipe function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
// Import tools (which now only export functions and TS types)
import { findLocalRestaurantsTool } from '@/ai/tools/find-local-restaurants-tool';
import { findVideoTutorialsTool } from '@/ai/tools/find-video-tutorials-tool';
// Import Zod schemas for tool outputs from the shared schema file
import {
  FindLocalRestaurantsOutputSchema,
  FindVideoTutorialsOutputSchema
} from '@/ai/schemas/shared-tool-schemas';

const GenerateRecipeInputSchema = z.object({
  cuisine: z.string().describe('The type of cuisine to generate a recipe for.'),
  ingredients: z
    .string()
    .optional()
    .describe('The ingredients that should be included in the recipe.'),
});
export type GenerateRecipeInput = z.infer<typeof GenerateRecipeInputSchema>;

const GenerateRecipeOutputSchema = z.object({
  recipeName: z.string().describe('The name of the recipe.'),
  steps: z.array(z.string()).describe('The step-by-step instructions for the recipe.'),
  restaurantLinks: FindLocalRestaurantsOutputSchema.optional().describe('Links to local restaurants where the meal can be ordered. (Generated by findLocalRestaurantsTool)'),
  videoTutorialLinks: FindVideoTutorialsOutputSchema.optional().describe('Links to video tutorials for the meal. (Generated by findVideoTutorialsTool)'),
});
export type GenerateRecipeOutput = z.infer<typeof GenerateRecipeOutputSchema>;

export async function generateRecipe(input: GenerateRecipeInput): Promise<GenerateRecipeOutput> {
  return generateRecipeFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateRecipePrompt',
  input: {schema: GenerateRecipeInputSchema},
  output: {schema: GenerateRecipeOutputSchema},
  tools: [findLocalRestaurantsTool, findVideoTutorialsTool],
  prompt: `You are a world-class chef, skilled in creating recipes for any cuisine.

The user will provide you with a cuisine, and optionally a list of ingredients.

You will generate a recipe with step-by-step instructions, listing out each step clearly.

After generating the recipe steps, if the user's query seems to be for a common dish, please also:
1. Use the 'findLocalRestaurantsTool' to suggest 1-2 local restaurants where the user might be able to order this dish.
   For the location, use "San Francisco, CA". Only use this tool if the dish is something commonly found in restaurants.
2. Use the 'findVideoTutorialsTool' to find 1-2 video tutorials on how to prepare this dish.
   Only use this tool if the dish is something people would typically look up a tutorial for.

If the dish is very obscure or highly customized based on rare ingredients, you may skip finding restaurants or videos.

Cuisine: {{{cuisine}}}
{{#if ingredients}}Ingredients: {{{ingredients}}}{{/if}}
`,
});

const generateRecipeFlow = ai.defineFlow(
  {
    name: 'generateRecipeFlow',
    inputSchema: GenerateRecipeInputSchema,
    outputSchema: GenerateRecipeOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
